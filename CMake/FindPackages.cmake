# generated by Buildyard, do not edit.

include(System)
list(APPEND FIND_PACKAGES_DEFINES ${SYSTEM})

find_package(Equalizer 1.7  REQUIRED)
find_package(Boost 1.41.0  REQUIRED)
find_package(VTK  NO_MODULE REQUIRED)

if(EXISTS ${CMAKE_SOURCE_DIR}/CMake/FindPackagesPost.cmake)
  include(${CMAKE_SOURCE_DIR}/CMake/FindPackagesPost.cmake)
endif()

if(Equalizer_FOUND)
  set(Equalizer_name Equalizer)
endif()
if(EQUALIZER_FOUND)
  set(Equalizer_name EQUALIZER)
endif()
if(Equalizer_name)
  list(APPEND FIND_PACKAGES_DEFINES VTKDEMOS_USE_EQUALIZER)
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} Equalizer")
  link_directories(${${Equalizer_name}_LIBRARY_DIRS})
  if(NOT "${${Equalizer_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${Equalizer_name}_INCLUDE_DIRS})
  endif()
endif()

if(Boost_FOUND)
  set(Boost_name Boost)
endif()
if(BOOST_FOUND)
  set(Boost_name BOOST)
endif()
if(Boost_name)
  list(APPEND FIND_PACKAGES_DEFINES VTKDEMOS_USE_BOOST)
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} Boost")
  link_directories(${${Boost_name}_LIBRARY_DIRS})
  if(NOT "${${Boost_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(SYSTEM ${${Boost_name}_INCLUDE_DIRS})
  endif()
endif()

if(VTK_FOUND)
  set(VTK_name VTK)
endif()
if(VTK_FOUND)
  set(VTK_name VTK)
endif()
if(VTK_name)
  list(APPEND FIND_PACKAGES_DEFINES VTKDEMOS_USE_VTK)
  set(FIND_PACKAGES_FOUND "${FIND_PACKAGES_FOUND} VTK")
  link_directories(${${VTK_name}_LIBRARY_DIRS})
  if(NOT "${${VTK_name}_INCLUDE_DIRS}" MATCHES "-NOTFOUND")
    include_directories(${${VTK_name}_INCLUDE_DIRS})
  endif()
endif()

set(VTKDEMOS_BUILD_DEBS autoconf;automake;bison;cmake;flex;freeglut3-dev;git;git-review;git-svn;libavahi-compat-libdnssd-dev;libavcodec-dev;libavformat-dev;libavutil-dev;libboost-date-time-dev;libboost-program-options-dev;libboost-regex-dev;libboost-serialization-dev;libboost-system-dev;libgl1-mesa-dev;libglewmx1.6-dev;libhwloc-dev;libibverbs-dev;libjpeg-turbo8-dev;libopencv-dev;libopenmpi-dev;libopenscenegraph-dev;libqt4-dev;librdmacm-dev;libspnav-dev;libswscale-dev;libturbojpeg;libudt-dev;libx11-dev;libxmu-dev;ninja-build;pkg-config;subversion)

set(VTKDEMOS_DEPENDS Equalizer;Boost;VTK)

# Write defines.h and options.cmake
if(NOT PROJECT_INCLUDE_NAME)
  set(PROJECT_INCLUDE_NAME ${CMAKE_PROJECT_NAME})
endif()
if(NOT OPTIONS_CMAKE)
  set(OPTIONS_CMAKE ${CMAKE_BINARY_DIR}/options.cmake)
endif()
set(DEFINES_FILE "${CMAKE_BINARY_DIR}/include/${PROJECT_INCLUDE_NAME}/defines${SYSTEM}.h")
set(DEFINES_FILE_IN ${DEFINES_FILE}.in)
file(WRITE ${DEFINES_FILE_IN}
  "// generated by CMake/FindPackages.cmake, do not edit.\n\n"
  "#ifndef ${CMAKE_PROJECT_NAME}_DEFINES_${SYSTEM}_H\n"
  "#define ${CMAKE_PROJECT_NAME}_DEFINES_${SYSTEM}_H\n\n")
file(WRITE ${OPTIONS_CMAKE} "# Optional modules enabled during build\n")
foreach(DEF ${FIND_PACKAGES_DEFINES})
  add_definitions(-D${DEF}=1)
  file(APPEND ${DEFINES_FILE_IN}
  "#ifndef ${DEF}\n"
  "#  define ${DEF} 1\n"
  "#endif\n")
if(NOT DEF STREQUAL SYSTEM)
  file(APPEND ${OPTIONS_CMAKE} "set(${DEF} ON)\n")
endif()
endforeach()
file(APPEND ${DEFINES_FILE_IN}
  "\n#endif\n")

include(UpdateFile)
update_file(${DEFINES_FILE_IN} ${DEFINES_FILE})
if(Boost_FOUND) # another WAR for broken boost stuff...
  set(Boost_VERSION ${Boost_MAJOR_VERSION}.${Boost_MINOR_VERSION}.${Boost_SUBMINOR_VERSION})
endif()
if(CUDA_FOUND)
  string(REPLACE "-std=c++11" "" CUDA_HOST_FLAGS "${CUDA_HOST_FLAGS}")
  string(REPLACE "-std=c++0x" "" CUDA_HOST_FLAGS "${CUDA_HOST_FLAGS}")
endif()
if(FIND_PACKAGES_FOUND)
  if(MSVC)
    message(STATUS "Configured with ${FIND_PACKAGES_FOUND}")
  else()
    message(STATUS "Configured with ${CMAKE_BUILD_TYPE}${FIND_PACKAGES_FOUND}")
  endif()
endif()
